# %%
from osgeo import gdal
from pathlib import Path
import config
from classes import SHO
from ml import crop_box_gen
import shutil
import csv
# %%
def id_to_chips(img_path):
    """Ingest one large GeoTiff, replace it with chips and a reduced size image (mask.png) to be processed in photoshop

    Arguments:
        img_path {Path} -- Location of a large GeoTiff
    """    
    chp_dir = Path('training/chp')
    chp_dir.mkdir(exist_ok=True)

    tiff = gdal.Open(str(img_path))
    print("Create chps")
    boxes = crop_box_gen(tiff.RasterXSize, tiff.RasterYSize, chip_size, tiff.GetGeoTransform(), overhang)    
    for i, b in enumerate(boxes): # 6.7s per 512px chip
        if i<max_chip_qty:
            png_path = chp_dir/f'{str(img_path.parent)}_{i}.png'
            if not png_path.exists() or start_over:
                gdal.Translate(str(png_path), tiff, format="PNG", width=reduced_chip_size, height=reduced_chip_size, projWin=b, outputType=gdal.GDT_Byte) # check out more args here: https://gdal.org/python/osgeo.gdal-module.html#TranslateOptions
    gdal.Translate(str(img_path.with_name('mask.png')), tiff, format="PNG", widthPct=reduced_chip_size/chip_size*100, heightPct=reduced_chip_size/chip_size*100, outputType=gdal.GDT_Byte)
    del tiff
    img_path.unlink()

# %%
def id_to_masks(img_path):
    """Ingest a small mask.png

    Arguments:
        img_path {Path} -- Location where the large GeoTiff was
    """    
    lbl_dir = Path('training/lbl')
    lbl_dir.mkdir(exist_ok=True)

    png = gdal.Open(str(img_path.with_name('mask.png')))
    print("Create lbls")
    boxes = crop_box_gen(png.RasterXSize, png.RasterYSize, reduced_chip_size, png.GetGeoTransform(), overhang)    
    for i, b in enumerate(boxes): # 6.7s per 512px chip
        if i<max_chip_qty:
            png_path = lbl_dir/f'{str(img_path.parent)}_{i}.png'
            if not png_path.exists() or start_over:
                gdal.Translate(str(png_path), png, format="PNG", width=reduced_chip_size, height=reduced_chip_size, projWin=b, outputType=gdal.GDT_Byte)
                b = gdal.Open(str(png_path))
                stats = b.GetRasterBand(1).GetStatistics(0,1)
                if stats[1]>0:
                    with open('training/oils.csv','a') as f:
                        csv.writer(f).writerow([png_path.stem])
                del b
    del png
    shutil.rmtree(str(img_path.parent))

# %%
chip_size = 4096
reduced_chip_size = 512
max_chip_qty = 9999
start_over = True
overhang = False

# %%
for pid in set(prods):
    print(pid)
    sho = SHO(pid)
    sho.download_grd_tiff_from_s3()
    img_path = Path(pid)/"vv_grd.tiff"
    id_to_chips(img_path)   
    
# %%

# XXX Before running this block, you must edit mask.png in photoshop to create a [0,1] mask
for pid in set(prods):
    print(pid)
    img_path = Path(pid)/"vv_grd.tiff"
    if img_path.parent.exists():
        id_to_masks(img_path)

# %%

prods = [
    # "S1A_IW_GRDH_1SDV_20200128T001357_20200128T001423_030993_038F41_7BE6",
    # "S1A_IW_GRDH_1SDV_20200128T001658_20200128T001733_030993_038F42_D900",
    # "S1A_IW_GRDH_1SDV_20190101T193354_20190101T193421_025288_02CC18_DB4C",
    # "S1B_IW_GRDH_1SDV_20190104T100635_20190104T100700_014343_01AAFE_7570",
    # "S1A_IW_GRDH_1SDV_20190105T221712_20190105T221737_025348_02CE45_53F2",
    # "S1A_IW_GRDH_1SDV_20190106T184944_20190106T185013_025360_02CEB8_5600",
    # "S1A_IW_GRDH_1SDV_20190106T225613_20190106T225638_025363_02CED2_BCF8",
    # "S1A_IW_GRDH_1SDV_20190107T220013_20190107T220038_025377_02CF52_E15E",
    # "S1A_IW_GRDH_1SDV_20190107T220038_20190107T220103_025377_02CF52_7027",
    # "S1A_IW_GRDH_1SDV_20190107T220103_20190107T220128_025377_02CF52_590C",
    # "S1A_IW_GRDH_1SDV_20190107T175305_20190107T175330_025375_02CF39_85AB",
    # "S1A_IW_GRDH_1SDV_20190107T003121_20190107T003146_025364_02CEDA_F4D9",
    # "S1B_IW_GRDH_1SDV_20190109T100924_20190109T100949_014415_01AD5C_0F1B",
    # "S1A_IW_GRDH_1SDV_20190110T222414_20190110T222439_025421_02D0E4_9308",
    # "S1A_IW_GRDH_1SDV_20200129T114310_20200129T114335_031015_038FFE_2C05",
    # "S1A_IW_GRDH_1SDV_20200129T114245_20200129T114310_031015_038FFE_F3C2",
    # "S1B_IW_GRDH_1SDV_20200126T102454_20200126T102523_019986_025CF5_B32F",
    # "S1A_IW_GRDH_1SDV_20200126T111655_20200126T111720_030970_038E72_9117",
    # "S1B_IW_GRDH_1SDV_20200201T033929_20200201T033954_020070_025FBD_297F",
    # "S1B_IW_GRDH_1SDV_20200118T053703_20200118T053732_019867_02592F_A811",
    # "S1A_IW_GRDH_1SDV_20200119T021530_20200119T021554_030863_038AA8_F530",
    # "S1A_IW_GRDH_1SDV_20200122T055401_20200122T055426_030909_038C36_8431",
    # "S1A_IW_GRDH_1SDV_20200126T175246_20200126T175311_030975_038E94_50A7",
    # "S1A_IW_GRDH_1SDV_20200126T175311_20200126T175336_030975_038E94_BAE3",
    # "S1B_IW_GRDH_1SDV_20200129T155616_20200129T155641_020034_025E7A_E89A",
    # "S1B_IW_GRDH_1SDV_20200202T152638_20200202T152703_020092_02606E_046A",
    # "S1A_IW_GRDH_1SDV_20200204T063616_20200204T063641_031099_0392E0_F24A",
    # "S1A_IW_GRDH_1SDV_20200201T211115_20200201T211140_031064_0391A8_983F",
    # "S1B_IW_GRDH_1SDV_20200203T214318_20200203T214343_020110_02610A_9626",
    # "S1B_IW_GRDH_1SDV_20200204T100525_20200204T100550_020118_026141_18FF",
    # "S1A_IW_GRDH_1SDV_20200207T175246_20200207T175311_031150_0394AF_A63F",
    # "S1B_IW_GRDH_1SDV_20200209T055335_20200209T055400_020188_02637F_8CF2",
    # "S1B_IW_GRDH_1SDV_20190115T214141_20190115T214206_014510_01B06F_F9AA",
    # "S1B_IW_GRDH_1SDV_20190116T114133_20190116T114203_014519_01B0AF_CA8F",
    # "S1A_IW_GRDH_1SDV_20190116T231135_20190116T231200_025509_02D416_6D58",
    # "S1B_IW_GRDH_1SDV_20190125T180112_20190125T180137_014654_01B506_FF79",
    # "S1A_IW_GRDH_1SDV_20190202T142444_20190202T142509_025752_02DD07_9291",
    # "S1A_IW_GRDH_1SDV_20190211T103308_20190211T103338_025880_02E181_5EAE",
    # "S1A_IW_GRDH_1SDV_20190212T053018_20190212T053043_025892_02E1E8_97AF",
    # "S1A_IW_GRDH_1SDV_20190212T053018_20190212T053043_025892_02E1E8_97AF",
    # "S1A_IW_GRDH_1SDV_20190220T165541_20190220T165606_026016_02E64D_E8B3",
    # "S1A_IW_GRDH_1SDV_20190325T220854_20190325T220919_026500_02F7EB_CD1D",
    # "S1A_IW_GRDH_1SDV_20190302T224655_20190302T224724_026165_02EBA8_686C",
    # "S1A_IW_GRDH_1SDV_20190303T052237_20190303T052302_026169_02EBC9_9497",
    # "S1A_IW_GRDH_1SDV_20190616T050022_20190616T050047_027700_032067_A535",
    # "S1A_IW_GRDH_1SDV_20200211T013429_20200211T013452_031198_039653_168B",
    # "S1B_IW_GRDH_1SDV_20200211T035946_20200211T040011_020216_02646F_FEB4",
    # "S1A_IW_GRDH_1SDV_20200212T180123_20200212T180148_031223_03972C_E262",
    # "S1B_IW_GRDH_1SDV_20200214T183318_20200214T183343_020269_026621_2FF4",
    # "S1A_IW_GRDH_1SDV_20200217T221717_20200217T221742_031298_0399CA_0332",
    # "S1A_IW_GRDH_1SDV_20200210T222419_20200210T222444_031196_03964D_A0A7",
    # "S1A_IW_GRDH_1SDV_20200211T212649_20200211T212714_031210_0396D2_2D6D",
    # "S1A_IW_GRDH_1SDV_20200211T104936_20200211T105001_031204_03968F_757F",
    # "S1A_IW_GRDH_1SDV_20200213T193149_20200213T193218_031238_0397B3_0398",
    # "S1A_IW_GRDH_1SDV_20200214T215049_20200214T215114_031254_03983F_8378",
    # "S1B_IW_GRDH_1SSV_20200215T105749_20200215T105817_020278_02667B_DC94",
    # "S1A_IW_GRDH_1SDV_20200222T222419_20200222T222444_031371_039C53_4208",
    # "S1B_IW_GRDH_1SDV_20200217T062710_20200217T062735_020305_026740_E3B6",
    # "S1B_IW_GRDH_1SDV_20200217T154841_20200217T154906_020311_026773_ED65",
    # "S1A_IW_GRDH_1SDV_20200219T053049_20200219T053114_031317_039A75_C477",
    # "S1B_IW_GRDH_1SDV_20200221T165529_20200221T165554_020370_026955_0F9A",
    # "S1A_IW_GRDH_1SDV_20200222T222419_20200222T222444_031371_039C53_4208",
    # "S1B_IW_GRDH_1SDV_20200225T233242_20200225T233310_020432_026B6A_F10B",
    # "S1B_IW_GRDH_1SDV_20200226T101646_20200226T101715_020438_026B9C_54F0",
    # "S1A_IW_GRDH_1SDV_20200226T215152_20200226T215217_031429_039E49_B0AE",
    # "S1B_IW_GRDH_1SDV_20200227T214134_20200227T214203_020460_026C48_5EF8",
    # "S1B_IW_GRDH_1SDV_20200228T100639_20200228T100704_020468_026C7F_F878",
    # "S1B_IW_GRDH_1SDV_20200223T180822_20200223T180847_020400_026A61_60DE",
    # "S1B_IW_GRDH_1SDV_20200302T043210_20200302T043235_020508_026DC6_4CF0",
    # "S1A_IW_GRDH_1SDV_20200302T215359_20200302T215428_031502_03A0D7_BFDF",
    # "S1A_IW_GRDH_1SDV_20200303T075651_20200303T075710_031508_03A10F_29E2",
    # "S1B_IW_GRDH_1SDV_20200306T035921_20200306T035946_020566_026F9A_9BD8",
    # "S1A_IW_GRDH_1SDV_20200309T015855_20200309T015920_031592_03A3E9_40C5",
    # "S1B_IW_GRDH_1SDV_20200311T040511_20200311T040536_020639_0271F7_997E",
    # "S1A_IW_GRDH_1SDV_20200307T112815_20200307T112840_031569_03A31D_D1F1",
    # "S1A_IW_GRDH_1SDV_20200311T213601_20200311T213626_031633_03A55E_D10F",
    # "S1A_IW_GRDH_1SDV_20200313T225459_20200313T225528_031663_03A666_F20C",
    # "S1A_IW_GRDH_1SDV_20200314T111604_20200314T111629_031670_03A6B0_CD3D",
    # "S1A_IW_GRDH_1SDV_20200314T034008_20200314T034033_031666_03A682_0F6A",
    # "S1A_IW_GRDH_1SDV_20200315T224030_20200315T224055_031692_03A778_F12B",
    # "S1A_IW_GRDH_1SDV_20200318T230214_20200318T230239_031736_03A900_47C1",
    # "S1B_IW_GRDH_1SDV_20200319T153753_20200319T153822_020763_0275E8_3984",
    # "S1A_IW_GRDH_1SDV_20200321T015855_20200321T015920_031767_03AA09_EF4A",
    # "S1A_IW_GRDH_1SDV_20200321T232802_20200321T232832_031780_03AA81_6646",
    # "S1A_IW_GRDH_1SDV_20200323T105002_20200323T105027_031801_03AB47_3E55",
    # "S1B_IW_GRDH_1SDV_20200322T160526_20200322T160551_020807_02774A_D9BD",
    # "S1B_IW_GRDH_1SDV_20200324T062645_20200324T062710_020830_0277F3_1A19",
    # "S1B_IW_GRDH_1SDV_20200325T035046_20200325T035111_020843_027861_F30B",
    # "S1A_IW_GRDH_1SDV_20200326T053050_20200326T053115_031842_03ACB7_2AA8",
    # "S1A_IW_GRDH_1SDV_20200326T215543_20200326T215608_031852_03AD13_14FA",
    # "S1A_IW_GRDH_1SDV_20200402T214948_20200402T215013_031954_03B0A3_9BFB",
    # "S1A_IW_GRDH_1SDV_20200401T011853_20200401T011919_031927_03AFAC_E50D",
    # "S1A_IW_GRDH_1SDV_20200406T194140_20200406T194205_032011_03B2AB_C112",
    # "S1A_IW_GRDH_1SDV_20200403T023909_20200403T023934_031957_03B0B8_76CD",
    # "S1A_IW_GRDH_1SDV_20200404T063616_20200404T063641_031974_03B153_B4AA",
    # "S1B_IW_GRDH_1SDV_20200404T040511_20200404T040536_020989_027D08_F20D",
    # "S1B_IW_GRDH_1SDV_20200404T040511_20200404T040536_020989_027D08_F20D",
    # "S1A_IW_GRDH_1SDV_20200405T022315_20200405T022340_031986_03B1C1_6BDE",
    # "S1A_IW_GRDH_1SDV_20200413T224702_20200413T224731_032115_03B64B_600F",
    # "S1B_IW_GRDH_1SDV_20200415T214319_20200415T214344_021160_028277_9105",
    # "S1A_IW_GRDH_1SDV_20200415T115424_20200415T115449_032138_03B71A_5DBD",
    # "S1A_IW_GRDH_1SDV_20200407T034329_20200407T034354_032016_03B2D6_D260",
    # "S1A_IW_GRDH_1SDV_20200410T182609_20200410T182634_032069_03B4B5_7DE2",
    # "S1B_IW_GRDH_1SDV_20200410T173635_20200410T173704_021085_028009_900A",
    # "S1B_IW_GRDH_1SDV_20200410T173635_20200410T173704_021085_028009_900A",
    # "S1B_IW_GRDH_1SDV_20200411T163853_20200411T163918_021099_02808C_4551",
    # "S1A_IW_GRDH_1SDV_20200411T044852_20200411T044917_032075_03B4E3_A385",
    # "S1A_IW_GRDH_1SDV_20200412T180123_20200412T180148_032098_03B5B1_515A",
    # "S1B_IW_GRDH_1SDV_20200412T154038_20200412T154103_021113_0280FD_E66A",
    # "S1A_IW_GRDH_1SDV_20200417T004901_20200417T004927_032160_03B7E4_1D7F",
    # "S1A_IW_GRDH_1SDV_20200418T154154_20200418T154219_032184_03B8BB_C805",
    # "S1A_IW_GRDH_1SDV_20200420T184149_20200420T184214_032215_03B9E0_D701",
    # "S1A_IW_GRDH_1SDV_20200421T050520_20200421T050545_032221_03BA14_00C3",
    # "S1B_IW_GRDH_1SDV_20200421T041521_20200421T041546_021237_0284CF_821F",
    # "S1A_IW_GRDH_1SDV_20200422T023108_20200422T023133_032234_03BA81_5FD7",
    # "S1B_IW_GRDH_1SDV_20200422T032137_20200422T032206_021251_028542_2949",
]

#%%
# gdal.Warp(destNameOrDestDS=str(img_path.parent/'warped.tif'), srcDSOrSrcDSTab=str(img_path.parent/'chip.tif'), srcNodata=0, dstNodata=0)
# tiff = gdal.Open(str(img_path.parent/'warped.tif'))
# gdal.Translate(str(img_path.parent/'chip.tif'), tiff, format='GTiff', projWin=[0,0,512,512])
# %%